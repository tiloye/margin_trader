from abc import ABC, abstractmethod


class Strategy(ABC):
    """
    Strategy is an abstract base class providing an interface for
    all subsequent (inherited) strategy handling objects.

    The goal of a (derived) Strategy object is to generate Order
    objects for particular symbols based on the inputs of Bars
    (OLHCVI) generated by a DataHandler object.

    This is designed to work both with historic and live data as
    the Strategy object is agnostic to the data source,
    since it obtains the bar tuples from a queue object.
    """

    def __init__(self, symbols, data, broker):
        self.symbols = symbols
        self.data = data
        self.broker = broker

    @abstractmethod
    def on_market(self):
        """
        This method is called whenever a market event occurs. The order generation
        process should be implemented here.
        """
        raise NotImplementedError("Should implement on_market()")

    def on_fill(self, event):
        """
        This method is called whenever a fill event occurs.
        """
        pass

    def on_order(self, event):
        """
        This method is called whenever an order event occurs.
        """
        pass

    def add_event_queue(self, event_queue):
        self.events = event_queue
